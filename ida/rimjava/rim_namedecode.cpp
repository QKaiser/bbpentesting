#include "../idaldr.h"
#include "rim_namedecode.h"
char * Dictionary[] = {
	"", "in", "et", "it", "init", "init>", "de", "ce", "get", "cl", 
		"<init>", "er", "re", "<cl", "<clinit>", "im", "on", "at", "vi", "en", 
		"vice", "rim", "net", "device", "ap", "or", "api", "st", "ion", "pt", 
		"set", "al", "ro", "an", "ec", "ed", "$", "ad", "St", "th", 
		"In", "ss", "ert", "Pro", "am", "ry", ".", "ord", "0", "1", 
		"2", "3", "4", "5", "6", "7", "8", "9", "ata", "em", 
		"<", "rypt", ">", "ut", "ar", "A", "B", "C", "D", "E", 
		"F", "G", "H", "I", "J", "K", "L", "M", "N", "O", 
		"P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", 
		"Z", "co", "pert", "ic", "crypt", "_", "us", "a", "b", "c", 
		"d", "e", "f", "g", "h", "i", "j", "k", "l", "m", 
		"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", 
		"x", "y", "z", "Propert", "Property", "ey", "le", "Data", "va", "se", 
		"ate", "ava", "ing", "Rec", "Val", "java", "ption", "oc", "ent", "el", 
		"ang", "io", "id", "um", "rit", "crypto", "yst", "ystem", "Ex", "Record", 
		"ch", "Exce", "Exception", "read", "is", "gth", "ort", "ength", "ist", "int", 
		"Re", "Key", "un", "mp", "writ", "write", "Co", "la", "By", "Length", 
		"ui", "gr", "ress", "ac", "ur", "gram", "to", "ig", "Fi", "add", 
		"ex", "dex", "Datagram", "PropertyVal", "Ch", "iv", "Index", "ring", "ont", "od", 
		"eld", "Field", "String", "ase", "ation", "ect", "ll", "Of", "ocus", "ag", 
		"List", "end", "Ad", "cld", "cldc", "lic", "ra", "up", "comp", "rec", 
		"ran", "record", "Focus", "ow", "rans", "ext", "te", "ew", "getP", "il", 
		"ener", "umb", "op", "iz", "getM", "lang", "system", "System", "base", "age", 
		"der", "ip", "No", "He", "key", "Listener", "ize", "ub", "thumb", "Up", 
		"Stre", "Id", "pa", "Stream", "open", "ess", "Stat", "out", "ange", "send", 
		"port", "idth", "essage", "ition", "ime", "\377"
};

void doRimName(ea_t Address)
{
	char NameBuffer[260]={0};
	qstrncat(NameBuffer,"a",sizeof(NameBuffer));

	ea_t i=Address;
	while (unsigned char onechar=get_byte(i))
	{
		qstrncat(NameBuffer,Dictionary[onechar],sizeof(NameBuffer));
		i++;
	}

	doByte(Address,(i-Address)+1);

	do_name_anyway(Address,NameBuffer);
}